#!/bin/bash
# Input: 
# %env.TicketSearchPattern% : regex pattern for searching ticket tag 								
# %env.SkipTesting% : skip build/jira actions when needed											
# Output:
# %env.TicketNumber%
# %env.BranchName%

MarkerNotFound () {
	echo "Ticket tag not found"
	# fail build if ticket tag not found
	exit 1
}

GetBranchName () {
	head=$(git rev-parse HEAD)
	branchName=$(git branch -r --contains $head)
	echo Branch name - $branchName
	# set branch name as parameter for future steps
	echo "##teamcity[setParameter name='env.BranchName' value='"$branchName"']"
}

GetLastNotMergeCommit(){
	# Get parent commit
	parent=$(git show --no-patch --format="%P" $1)
	IFS=' ' read -ra ADDR <<< "$parent"
	# If there re 2 commits, that's mean that it's merge commit
	# In this case we need to find last commit before branch was merged
	if [[ "${#ADDR[@]}" >1 ]]
	then
		# Getting commit that already was in branch
		commits=$(git log -2 --first-parent --pretty=format:"%H")
		firstParent="$(echo $commits | cut -d' ' -f2)"
		# Checking which commit is new, than it's merged commit
		if [[ $firstParent = ${ADDR[1]} ]]
		then
			echo ${ADDR[0]}
		else
			echo ${ADDR[1]}
		fi

	else
		echo $1
	fi
}

GetTicketMarkers () {
	head=$(git rev-parse HEAD)
	commit=$(GetLastNotMergeCommit $head)
	# check if commit message contains ticket's tag regex
	echo $(git log --format=%s -n 1 $commit | egrep -o '%env.TicketSearchPattern%')
}


MarkerFound () {
	declare -a argAry1=("${!1}")
	# set marker as parameter for future steps
	echo "##teamcity[setParameter name='env.TicketNumber' value='${argAry1[@]}']"
}

# skip any action if true
if [[ %env.SkipTesting% = 'true' ]]
then
    exit 0
fi

GetBranchName
c=$(GetTicketMarkers)
echo Ticket markers - $c

foundMarkers=($(echo $c | sed "s/\(%env.TicketSearchPattern%\)/\1|/g" | tr '|' "\n"))

if [[ $c = '' ]]
then
    MarkerNotFound
else
    MarkerFound foundMarkers[@]
fi
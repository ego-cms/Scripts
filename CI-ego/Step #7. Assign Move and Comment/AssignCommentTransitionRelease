#!/bin/bash
# Input:
# %env.JiraUrl% : url path for jira  																	|| https://test.atlassian.net
# %env.JiraBotMailAddress% : email address for user which will interact with jira 						|| test@ego-cms.com
# %env.JiraBotApiToken% : api token for user which will interact with jira 								|| SOME_TEST_API_TOKEN
# %env.ReviewerUsername% : reviewer's username from jira 												|| testUser
# %env.BuildServerUrl% : Build server's url 															|| http://test.ego-cms.com:8111
# %system.teamcity.buildType.id% : Build type id 														||
# %teamcity.build.id% : build IsBuildFailed																||
# %env.ApkName% : apk name																				|| com.egocms.tmtest.MyTestProject-Signed.apk
# %env.IpaName% : ipa name 																				|| MyTestProject.iOS.ipa
# %env.IsBuildFailed% : contains info if build was failed or succeed									||
# %env.TicketNumber% : Ticket number of build 															||
# %env.ProceedTransition% : id of transition for moving to column										|| 101
# %env.SkipTesting% : skip build/jira actions when needed												|| false

AddBuildToJira(){
	# send rest call for adding remote link to jira ticket
	result=$(curl --request POST --url '%env.JiraUrl%/rest/api/3/issue/'"$1"'/remotelink' --user '%env.JiraBotMailAddress%:%env.JiraBotApiToken%' --header 'Accept: application/json' --header 'Content-Type: application/json' --data '{
	    "object": {
	        "url":"'"$3"'",
	        "title":"'"$2"'"
	    }
	}')

	prop='errorMessages'
	# parsing any json error
	errorMessage=`echo $result | sed 's/\\\\\//\//g' | sed 's/[{}]//g' | awk -v k="text" '{n=split($0,a,","); for (i=1; i<=n; i++) print a[i]}' | sed 's/\"\:\"/\|/g' | sed 's/[\,]/ /g' | sed 's/\"//g' | grep -w $prop | cut -d":" -f2 | sed -e 's/^ *//g' -e 's/ *$//g'`
	if [[ $errorMessage = '' ]]
	then
	    echo "Build $1 added"
	else
	    echo "Build adding failed.
ErrorMessage:" $errorMessage
	fi
}

AddCommentToJira () {
	# send rest call for adding comment to jira ticket
	result=$(curl --request POST --url '%env.JiraUrl%/rest/api/3/issue/'"$1"'/comment' --user '%env.JiraBotMailAddress%:%env.JiraBotApiToken%' --header 'Accept: application/json' --header 'Content-Type: application/json' --data '{
	  "body": {
	    "type": "doc",
	    "version": 1,
	    "content": [
	      {
	        "type": "paragraph",
	        "content": [
	          {
	            "type": "text",
	            "text": "'"$2"'"
	          }
	        ]
	      }
	    ]
	  }
	}')

	prop='errorMessages'
	# parsing any json error
	errorMessage=`echo $result | sed 's/\\\\\//\//g' | sed 's/[{}]//g' | awk -v k="text" '{n=split($0,a,","); for (i=1; i<=n; i++) print a[i]}' | sed 's/\"\:\"/\|/g' | sed 's/[\,]/ /g' | sed 's/\"//g' | grep -w $prop | cut -d":" -f2 | sed -e 's/^ *//g' -e 's/ *$//g'`
	if [[ $errorMessage = '' ]]
	then
	    echo "Comment to $1 added"
	else
	    echo "Adding comment to $1 failed.
ErrorMessage:" $errorMessage
	fi
}

AssignToReviewer () {
	# send rest call for assigning jira ticket to reviewer
	result=$(curl --request PUT --url '%env.JiraUrl%/rest/api/3/issue/'"$1"'/assignee' --user '%env.JiraBotMailAddress%:%env.JiraBotApiToken%' --header 'Content-Type: application/json' --data '{
	  "name": "%env.ReviewerUsername%"
	}')

	prop='errorMessages'
	# parsing any json error
	errorMessage=`echo $result | sed 's/\\\\\//\//g' | sed 's/[{}]//g' | awk -v k="text" '{n=split($0,a,","); for (i=1; i<=n; i++) print a[i]}' | sed 's/\"\:\"/\|/g' | sed 's/[\,]/ /g' | sed 's/\"//g' | grep -w $prop | cut -d":" -f2 | sed -e 's/^ *//g' -e 's/ *$//g'`
	if [[ $errorMessage = '' ]]
	then
	    echo "Issue $1 assigned"
	else
	    echo "Issue assignation $1 failed.
ErrorMessage:" $errorMessage
	fi
}

MakeTransition () {
	# send rest call for moving jira ticket to needed column
	result=$(curl --request POST --url '%env.JiraUrl%/rest/api/3/issue/'"$1"'/transitions' --user '%env.JiraBotMailAddress%:%env.JiraBotApiToken%' --header 'Content-Type: application/json' --data '{
	  "transition": { 
	  	"id": "'"$2"'" 
	  }
	}')

	prop='errorMessages'
	# parsing any json error
	errorMessage=`echo $result | sed 's/\\\\\//\//g' | sed 's/[{}]//g' | awk -v k="text" '{n=split($0,a,","); for (i=1; i<=n; i++) print a[i]}' | sed 's/\"\:\"/\|/g' | sed 's/[\,]/ /g' | sed 's/\"//g' | grep -w $prop | cut -d":" -f2 | sed -e 's/^ *//g' -e 's/ *$//g'`
	if [[ $errorMessage = '' ]]
	then
	    echo "Issue $1 transition finished"
	else
	    echo "Issue $1 transition failed.
ErrorMessage:" $errorMessage
	fi
}

ProceedMarker () {
	declare -a argAry1=("${!1}")
	# For each ticket number write comment, attach build, assigning and make transition
	for i in "${argAry1[@]}"
	do

		currentDate=$(date +'%m/%d/%Y %H:%M:%S')

		buildNameDroid="Android build $currentDate"
		# getting path to Android artifact
		buildDroidURL=$(printf "%env.BuildServerUrl%/repository/download/%system.teamcity.buildType.id%/%teamcity.build.id%:id/%env.ApkName%")

		echo %env.BranchName%
		# building jira comment
		commentText=$(printf "Build Success\\\nBranch name: %s\\\n\\\nArtifacts:\\\n # %s" "%env.BranchName%" "$buildNameDroid")

		AddBuildToJira $i "$buildNameDroid" "$buildDroidURL"
		AddCommentToJira $i "$commentText"
		AssignToReviewer $i

		# If merge commit moving to merge collumn, otherwise to qa
		if [[ %env.IsMergeCommit% = 'true' ]]
		then
		     MakeTransition $i "%env.MergeTransition%"
		else
		     MakeTransition $i "%env.ProceedTransition%"
		fi
	
	done
}

# skip any action if true
if [[ %env.SkipTesting% = 'true' ]]
then
    exit 0
fi

# skip any action if build failed
if [[ %env.IsBuildFailed% = 'false' ]]
then
    foundMarkers=(%env.TicketNumber%)
	ProceedMarker foundMarkers[@]
else
    exit 0
fi